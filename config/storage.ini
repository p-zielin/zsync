[storage]
# Main dataset to be backed up (master mode) or dataset where incoming snapshots are stored (slave mode)
root_dataset=test

# Mountpoint prefix for root_dataset, which will be prepended to child datasets during zfs receive (slave mode)
mountpoint=

###################################### USTAWIENIA BACKUPÃ“W ######################################
[backup]
# Works in master mode. Determines if snapshots are created when backup is triggered (timer or REST service).
# Snapshots are taken by recursive zfs snapshot command on root_dataset.
snapshot=false

# When this parameter is true, zsync sneds datasets which are direct children of 'root_dataset'. Program lists first level
# of 'root_dataset' and sends each dataset with descendent filesystems (running zfs send with -R option). Setting this
# param to 'true'  causes ignore of 'depth' aprameter.
# When 'recursive' is false, zsync lists 'root_dataset' with -d option using value from 'depth'. Each dataset listed
# is sent spearately without descendent filesystems (up to 'depth' steps).
recursive=false

# When communications fails between master and slave, master node can retry sending task 'retry_count' times.
retry_count=2

# Socket timeout.
socket_timeout=20

# Works in slave mode. Here define interface which listens for incoming connections from master.
listen=0.0.0.0:4000

# WOrks in slave mode - allowed master hosts which can connect to slave machine.
allowed_ips=

# Max allowed concurrent connections. It's recommended to use value 1 for backups where param 'recursive' is false.
# On slave node this parameter determines maximum of client connections. On master mode it determines how many worker
# threads are running and sending snapshots to slave node.
threads=2

# Works in master mode - number of minutes beteween each backups. This parameter has higher priority over 'time'.
interval=0

# Works in master mode - hour and minute when backup is started (one time each day). When backup transfers last longer
# than timespan between cureent and next schedule, zsync don't start new task. Zsync will try running in next day.
time=00:00

# Determinees in which mode zsync works
# master - makes (or not) snapshots and sends them into slave (or not, when 'slave_address' is empty).
# slave - listens on 'listen' interface for incoming connections and receives snapshots from master.
mode=master

# Network buffer size for sending / receiving zfs data.
buffer_size=15

# Works in master mode - slave node address. If this value is empty, master makes only snapshots and eventally deletes
# old backups but no transfers are performed.
slave_address=192.168.10.20:4000

# Works in slave/master mode - backups older than 'keep_days' are deleted. Last two snapshots are never deleted.
# If this value is set to zero, snapshots are never deleted.
keep_days=7

# Works in slave mode (Not implemented yet) - if dataset contains only overtimed snapshots you can force zsync
# to destroy whole dataset.
remove_datasets=false

# PCRE expression which allows filtering which datasets can be transferred to slave node. When regex condition is
# filfilled, dataset can be sent. When working with dataset names don't use 'root_dataset' in expression, because
# only relative names are processed.
# Empty value disables filtering.
#
# Example:
# Our root_dataset is zroot dataset and look like this:
# zroot/backup
# zroot/backup/db
# zroot/nextcloud
# zroot/user_1984
# zroot/user_1984/mail
# zroot/user_10
#
# We want to send only backup/db, nextcloud and any dataset with name 'user_' followed by four digits and optionally
# other signs. Setting parameter to this value:
# filter_regex=backup\/db*|nextcloud|(usr_\d\d\d\d).*
# will send everything except user_10 dataset.
filter_regex=

# Depth parameter for command zfs list -d. See 'recursive' option. Value 0 means infinite depth.
depth=0

# Backup snapshot name prefix. Zsync uses this value during zfs snapshot command and during zfs list -t snap.
prefix=backup-


###################################### WEB SERVER ######################################

# REST API is very simple and should not be exposed to unsafe networks. It allows running or terminating backups.
# It also allows simple navigation inside 'root_dataset'.

[www]
port=8090
interface=0.0.0.0
key_password=
key_file=/home/zielin/ssl/domain.key
ca_file=/home/zielin/ssl/rootCA.crt
cert_file=/home/zielin/ssl/domain.crt

# When true web server runs in SSL mode.
ssl=false

[log]
# Log level
level=notice

# Enables or disables terminal logging
console=true

# Uses colors for different log levels
colors=true

# Enables or disables log rotation
file=true

# Path to log directory
dir=./log

# How often rotate logs
rotation=daily

# Allows compression of rotated log files
compress=false

# Always rotate logs when application starts
rotate_open=false